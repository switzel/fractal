#!/usr/bin/env python

from __future__ import division,print_function,unicode_literals
from geode.value import parser
from geode import *
from fractal_helper import *
from collections import defaultdict
import sys
import re

# Depth 4:
#   ./poincare --mode flop --tolerance 1e-3 --depth 4 --separation .05

# Properties
props = PropManager()
mode = props.add('mode','disk').set_allowed('disk flop test'.split())
depth = props.add('depth',3)
center = props.add('center','vertex')
resolution = props.add('resolution',20)
tolerance = props.add('tolerance',1e-2)
separation = props.add('separation',.8)
levels = props.add('levels',1)
degree = props.add('degree',7)
poly = props.add('poly',3)
autosave = props.add('autosave','')
checkpoint = props.add('checkpoint',20)
restart = props.add('restart','')
method = props.add('method','CG').set_allowed('''jitter limit
  Nelder-Mead Powell CG BFGS Newton-CG Anneal L-BFGS-B TNC COBYLA SLSQP dogleg trust-ncg'''.split())
flopseed = props.add('flopseed',8231110)
parser.parse(props,'Hyperbolic triangulation layout',)

c2r_dtype = {dtype(complex64):dtype(float32),dtype(complex128):dtype(float64)}
def splitcomplex(z):
  w = empty(z.shape+(2,),dtype=c2r_dtype[z.dtype])
  mergecomplex(w)[...] = z
  return w

r2c_dtype = {dtype(float32):dtype(complex64),dtype(float64):dtype(complex128)}
def mergecomplex(z):
  z = asarray(z)
  assert z.shape[-1]==2
  return z.view(r2c_dtype[z.dtype]).reshape(z.shape[:-1])

def distance(u,v=zeros(2)):
  '''Measure distance in the Poincare disk model of the hyperbolic plane.
  See http://en.wikipedia.org/wiki/Poincare_disk for details.'''
  return acosh(1+2*sqr_magnitudes(u-v)/((1-sqr_magnitudes(u))*(1-sqr_magnitudes(v))))

class Mobius(ndarray):
  # Mobius group theory:
  #   w = (az+b)/(cz+d)
  # When does f(z) preserve the unit circle?
  #   http://math.stackexchange.com/questions/34071/mobius-transforms-that-preserve-the-unit-disk
  #   f(z) = r (z+a)/(1+a'z)
  #   g(z) = s (z+b)/(1+b'z)
  #   f(g(z)) = r (s(z+b)/(1+b'z)+a) / (1 + a's(z+b)/(1+b'z))
  #           = r (s(z+b)+a(1+b'z)) / (1+b'z + a's(z+b))
  #           = r ((s+ab')z + sb+a) / (1+sa'b + (b'+sa')z)
  #           = rs ((1+s'ab')z + b+s'a) / (1+sa'b + (b+s'a)'z)
  # Let t = (1+s'ab')/(1+sa'b), so that |t| = 1.  Let c = (b+s'a)/(1+s'ab').  We have
  #   f(g(z)) = rst (z+c)/(1+c'z)

  __array_priority__ = -1.

  def __array_finalize__(self,*args):
    '''View the 2x2 complex matrices m as Mobius transforms.
    With no arguments, return a single identity transform.'''
    assert iscomplexobj(self)
    assert self.shape[-2:]==(2,2)

  def __mul__(self,z):
    if isinstance(z,Mobius):
      return multiply(self.view(ndarray)[...,None],z.reshape(z.shape[:-2]+(1,2,2))).sum(axis=-2).view(Mobius)
    else:
      z = mergecomplex(z)
      a,b,c,d = rollaxis(self.view(ndarray).reshape(self.shape[:-2]+(4,)),-1)
      return splitcomplex((a*z+b)/(c*z+d))

  def __pow__(self,e):
    if isinstance(e,int):
      if e == 0:
        return Mobius.identity()
      else:
        return self*(self**(e-1))
    else:
      raise NotImplemented(type(e))

  def inverse(self):
    a,b,c,d = rollaxis(self.view(ndarray).reshape(self.shape[:-2]+(4,)),-1)
    i = empty(self.shape,self.dtype)
    i[...,0,0] = d
    i[...,0,1] = -b
    i[...,1,0] = -c
    i[...,1,1] = a
    return (i/(a*d-b*c)[...,None,None]).view(Mobius)

  def normalized(self):
    a,b,c,d = rollaxis(self.view(ndarray).reshape(self.shape[:-2]+(4,)),-1)
    return self/sqrt(a*d-b*c)[...,None,None]

  @staticmethod
  def identity(dtype=complex128):
    return eye(2,dtype=dtype).view(Mobius)

  @staticmethod
  def from_angle(t):
    t = asarray(t)
    m = zeros(t.shape+(2,2,2),t.dtype)
    m[...,0,0,:] = polar(t)
    m[...,1,1,0] = 1
    return mergecomplex(m).view(Mobius)

  @staticmethod
  def translation(u):
    assert not iscomplexobj(u)
    "Walk the origin distance |u| in direction u/|u|"
    d,u = magnitudes_and_normalized(u)
    # Build rotations by u and conj(u)
    u = mergecomplex(u)
    # Here is how far the origin will go in the Poincare disk:
    #   distance(v,0) = d
    #   acosh(1+2v'v/(1-v'v)) = d
    #   1+2v'v/(1-v'v) = cosh(d)
    #   v'v/(1-v'v) = (cosh(d)-1)/2 = b
    #   v'v = b/(1+b)
    b = (cosh(d)-1)/2
    vv = b/(1+b)
    v = sqrt(vv)
    # If u is real, our Mobius transform will look like
    #   f(z) = r (z+a)/(1+a'z)
    #   f(1) = r (1+a)/(1+a') = 1
    #   v = f(0) = r a
    #   a = v
    #   r = 1
    #   f(z) = (z+v)/(vz+1)
    # If u is not real, we pre and post rotate:
    #   f(z) = u(u'z+v)/(u'vz+1) = (z+uv)/(u'vz+1)
    # Assemble transform
    m = empty(d.shape+(2,2),dtype=u.dtype)
    m[...,0,0] = 1
    m[...,0,1] = u*v
    m[...,1,0] = conj(u)*v
    m[...,1,1] = 1
    return m.view(Mobius)

  def __str__(self):
    return str(self.view(ndarray))

  def __repr__(self):
    return repr(self.view(ndarray))

  @staticmethod
  def empty(shape,dtype=complex128):
    if not isinstance(shape,tuple):
      shape = shape,
    return empty(shape+(2,2),dtype).view(Mobius)

  @staticmethod
  def concat(*args):
    return concatenate([a.view(ndarray) for a in args]).view(Mobius)

  @staticmethod
  def close(x,y=None):
    y = Mobius.identity() if y is None else y.normalized()
    return allclose(x.normalized(),y)

def test_mobius():
  random.seed(821)
  # Rotations
  v = (.2,.2)
  theta = random.randn()
  r = Mobius.from_angle(theta)
  assert allclose(r*v,Rotation.from_angle(theta)*v)
  # Translations
  u = random.randn(2)
  t = Mobius.translation(u)
  tf = Mobius.translation(-u)
  assert allclose(distance(t*zeros(2)),magnitude(u))
  assert allclose(distance(t*zeros(2),zeros(2)),magnitude(u))
  assert allclose(distance(zeros(2),t*zeros(2)),magnitude(u))
  assert allclose(angle_between(t*zeros(2),u),0)
  # Inverses
  m = Mobius.translation(u)*Mobius.translation(random.randn(2))
  assert Mobius.close(m*m.inverse())
  assert Mobius.close(m.inverse()*m)
  # Identities
  f = Mobius.from_angle(pi)
  assert Mobius.close(t*tf)
  assert Mobius.close(t*f,f*tf)
  assert Mobius.close(t*t,Mobius.translation(2*u))

@cache
def equilateral_length():
  t = 2*pi/degree()
  # The hyperbolic law of cosines for angle t, side s is
  #   cos t = -cos^2 t + sin^2 t cosh a
  #   a = acosh (cos(t)*(1+cos(t))/sin(t)^2)
  if poly()==3:
    c,s = cos(t),sin(t)
    return acosh(c*(1+c)/(s*s))
  elif poly()==4:
    # cos(t/2) = -cos(t)*cos(t/2)+sin(t)*sin(t/2)*cosh(side)
    return acosh(cos(t/2)*(1+cos(t))/(sin(t)*sin(t/2)))
  else:
    raise NotImplemented(poly())

@cache
def barycenter_to_vertex():
  t = 2*pi/degree()
  if poly()==3:
    return acosh(1/(sqrt(3)*tan(t/2)))
  elif poly()==4:
    # cos(t/2) = -cos(t)*cos(t/2)+sin(t)*sin(t/2)*cosh(side)
    return acosh(1/tan(t/2))
  else:
    raise NotImplemented(poly())

@cache
def lattice():
  '''Compute lattice points and transforms of the standard 7-valent triangulation
  of the Poincare disk model of the hyperbolic plane.'''
  a = 2*pi/degree()
  advance = Mobius.translation((equilateral_length(),0))*Mobius.from_angle(pi)
  rotate = Mobius.from_angle(a*arange(degree()))
  protate = advance*rotate[1]
  polygon = array([protate**i for i in xrange(0,poly())]).view(Mobius)
  link = (rotate[::-1]*polygon[1:-1,None]*rotate).reshape(-1,2,2)
  if center() == 'vertex':
    levels = [Mobius.identity()[None,:]]
  elif center() == 'polygon':
    move = Mobius.translation((barycenter_to_vertex(),0))*Mobius.from_angle(pi*(1 + 1/degree()))
    levels = [move*polygon]
  elif center() == 'edge':
    move = Mobius.translation((.5*equilateral_length(),0))*Mobius.from_angle(pi)
    levels = [move*array([Mobius.identity(),advance]).view(Mobius)]
  else:
    NotImplemented(center())
  for d in xrange(depth()):
    next = (levels[-1]*link[:,None]).reshape(-1,2,2)
    levels.append(next)
  trans = Mobius.concat(*levels)
  # Prune duplicates
  compact = ParticleTree(trans*zeros(2),1).remove_duplicates(1e-7)
  trans = trans[unique(compact,return_index=1)[1]]
  print('count = %d'%len(trans))
  return trans

def lattice_edges(lattice):
  a = 2*pi/degree()
  tree = ParticleTree(lattice*zeros(2),1)
  step = equilateral_length()
  walks = Mobius.translation(step*polar(a*arange(degree())))
  edges = []
  for i,m in enumerate(lattice):
    for walk in walks:
      p = m*walk*zeros(2)
      cp,j = tree.closest_point(p,1e-7)
      if all(isfinite(cp)) and distance(p,cp)<.1:
        edges.append((i,j))
  return asarray(edges,dtype=int32)

def interpolate(x,y,t):
  m = Mobius.translation(distance(x)[...,None]*normalized(x))
  y = m.inverse()*y
  dy = distance(y)[...,None]*normalized(y)
  t = asarray(t)[...,None]
  return m*(Mobius.translation(t*dy)*zeros(2))

def find_quads(X,edges):
  near = defaultdict(lambda:set())
  for x,y in edges:
    near[x].add(y)
    near[y].add(x)
  quads = set()
  for x,y in sort(edges,axis=1):
    for z in near[y]:
      if x<z:
        for w in near[z]:
          if y<w and x in near[w]:
            if cross(X[z]-X[x],X[y]-X[x]) > 0:
              quads.add((x,y,z,w))
            else:
              quads.add((x,w,z,y))
  return asarray(sorted(quads),dtype=int32)

@cache
def pruned_lattice():
  if poly()==3:
    return lattice()
  X = lattice()*zeros(2)
  edges = lattice_edges(lattice())
  return lattice()[unique(find_quads(X,edges).ravel())]

@cache
def lattice_mesh():
  X = pruned_lattice()*zeros(2)
  edges = lattice_edges(pruned_lattice())
  if poly()==3:
    near = defaultdict(lambda:set())
    for x,y in edges:
      near[x].add(y)
      near[y].add(x)
    tris = set()
    for x,y in edges:
      for z in near[x]:
        if z in near[y]:
          a,b,c = sorted((x,y,z))
          if cross(X[b]-X[a],X[c]-X[a])<0:
            b,c = c,b
          tris.add((a,b,c))
    return TriangleSoup(sorted(tris))
  elif poly()==4:
    quads = find_quads(X,edges)
    return PolygonSoup(4*ones(len(quads),dtype=int32),quads.ravel())
  else:
    raise NotImplemented(poly())

def subdivided():
  mesh = lattice_mesh()
  X = pruned_lattice()*zeros(2)
  if levels()==1:
    return mesh,X
  elif levels()==2 or levels()==4:
    for i in xrange(int(rint(log2(levels())))):
      subdiv = TriangleSubdivision(mesh)
      i,j = mesh.segment_soup().elements.T
      X = concatenate([X,interpolate(X[i],X[j],1/2)])
      mesh = subdiv.fine_mesh
    return mesh,X
  else:
    raise NotImplementedError('only subdivision levels 1,2,3 are allowed, got %d'%levels())
fine_lattice_mesh = cache(lambda:subdivided()[0])
fine_points = cache(lambda:subdivided()[1])

def jittermin(f,X,alpha=.99,beta=1.001,callback=None):
  random.randn(172131)
  step = 1.
  fx = f(X)
  while 1:
    X2 = X+step*random.randn(*X.shape)
    f2 = f(X2)
    if f2 < fx:
      step *= beta
      X = X2
      fx = f2
      print('SUCCESS: step %g'%step)
      if callback is not None:
        callback(X)
    else:
      step *= alpha
      print('FAIL: step %g'%step)

@cache
def flopsolve():
  X0 = fine_points()
  n = len(X0)
  edges = fine_lattice_mesh().segment_soup().elements
  rest = distance(X0[edges[:,0]],X0[edges[:,1]])
  rest /= rest.mean()
  if poly()==4:
    for count in fine_lattice_mesh().counts:
      assert count == 4
    diagonals = [fine_lattice_mesh().vertices[4*i:4*i+3:2] for i in xrange(len(fine_lattice_mesh().counts))] + [fine_lattice_mesh().vertices[4*i+1:4*i+4:2] for i in xrange(len(fine_lattice_mesh().counts))]
    edges = array(list(edges) + list(diagonals))
    rest = array(list(rest) + [2.]*len(diagonals))
  def lengths(X):
    return magnitudes(X[edges[:,1]]-X[edges[:,0]])

  # Scale so that the average edge length is closer to 1
  X0 /= lengths(X0).mean()
  # Move to 3D
  X0 = hstack([X0,zeros(n)[:,None]])
  # Apply some noise so that everything doesn't start in the plane
  random.seed(flopseed())
  X0 += .1*random.randn(n,3)

  # Define problem
  close = separation()
  stiff = 10
  if poly() > 3:
    mesh = fine_lattice_mesh().triangle_mesh()
    collisions = SimpleCollisions(mesh,X0,close,True)
  else:
    collisions = SimpleCollisions(fine_lattice_mesh(),X0,close,True)
  def energy(X,strict=True):
    X = X.reshape(-1,3)
    if strict and collisions.collisions(X):
      return 1e6
    Le = lengths(X)-rest
    L = sqr_magnitude(Le)/2
    Lm = maxabs(Le/rest)
    C = stiff*collisions.energy(X) if stiff else 0
    print('energies: L = %g (max %g), C = %g'%(L,Lm,C))
    return L+C
  def gradient(X):
    X = X.reshape(-1,3)
    L = unit_spring_energy_gradient(edges,rest,X)
    if stiff:
      C = stiff*collisions.gradient(X)
      return (L+C).ravel()
    else:
      return L.ravel()
  def worst(X):
    if collisions.collisions(X):
      C = inf
    else:
      C = close-collisions.closest(X)
    L = maxabs(lengths(X)/rest-1)
    print('worst: L = %g, C = %g'%(L,C))
    return max(L,C)

  # Test
  dX = 1e-7*random.randn(n,3)
  X = random.randn(n,3)
  numerical = energy(X+dX,strict=0)-energy(X-dX,strict=0)
  analytic = 2*dot(gradient(X),dX.ravel())
  error = relative_error(numerical,analytic)
  print('numerical = %g, analytic = %g, error = %g'%(numerical,analytic,error))
  assert error<1e-4

  # Restart if requested
  if restart():
    tm,X0 = read_mesh(restart())
    assert all(tm.elements()==fine_lattice_mesh().elements)

  # Optionally write out checkpoints
  callback = None
  if checkpoint():
    iterations = [0]
    m = re.match(r'^poincare-checkpoint-(\d+).obj$',restart())
    if m:
      iterations[0] = int(m.group(1))
    def checkwrite(X):
      iterations[0] += 1
      if iterations[0]%checkpoint()==0:
        name = 'poincare-checkpoint-%d.obj'%iterations[0]
        print('saving %s'%name)
        write_mesh(name,fine_lattice_mesh(),X.reshape(-1,3))
    callback = checkwrite

  # Solve
  if method()=='jitter':
    jittermin(worst,X0,callback=callback)
  elif method()=='limit':
    X = X0
    wX = worst(X)
    alpha = .1
    print('worst start = %g'%worst(X))
    while alpha > 1e-10:
      X2 = collisions.strain_limit(rest,X,alpha)
      w2 = worst(X2)
      if wX > w2 or isfinite(w2):
        X = X2
        wX = w2
        alpha *= 1
      else:
        alpha *= .9
      print('alpha = %g'%alpha)
  else:
    import scipy.optimize
    result = scipy.optimize.minimize(energy,X0.ravel(),jac=gradient,tol=tolerance(),callback=callback,method=method())
    X = result.x.reshape(-1,3)
  print('energy = %g'%energy(X))
  L = lengths(X)
  lo,hi = (L/rest).min(),(L/rest).max()
  print('length ratio range = %g %g (width %g)'%(lo,hi,hi-lo))
  print('closest = %g'%collisions.closest(X))
  print('collisions = %d'%collisions.collisions(X))
  return X

def flop():
  def save_mesh(name='poincare.obj'):
    write_mesh(name,fine_lattice_mesh(),flopsolve())
  if autosave():
    save_mesh(autosave())
  flopsolve()
  try:
    import gui
    app = gui.QEApp(sys.argv,True)
    main = gui.MainWindow(props)
    main.view.add_scene('mesh',gui.MeshScene(props,fine_lattice_mesh,flopsolve,(.2,.2,1),(0,1,0)))
    main.add_menu_item('File','Save',save_mesh,'')
    main.init()
    app.run()
  except ImportError:
    print('Warning: other/gui not found, falling back to matplotlib')
    X = flopsolve()
    tris = fine_lattice_mesh().elements
    # Rescale since matplotlib is broken
    X -= X.min(axis=0)
    X /= X.max()
    # Plot
    from mpl_toolkits.mplot3d import Axes3D
    from mpl_toolkits.mplot3d.art3d import Poly3DCollection
    import matplotlib.pyplot as plt
    Axes3D(plt.figure()).add_collection3d(Poly3DCollection(X[tris]))
    plt.show()

def plot():
  import pylab
  # Draw vertices
  points = fine_points()
  print('points %s'%(points.shape,))
  pylab.plot(points[:,0],points[:,1],'o')
  # Draw edges
  edges = fine_lattice_mesh().segment_soup().elements
  mesh = fine_lattice_mesh()
  if isinstance(mesh,TriangleSoup):
    print('triangles = %d'%len(mesh.elements))
  else:
    print('polys = %d'%len(mesh.counts))
  t = linspace(0,1,num=resolution())
  paths = interpolate(points[edges[:,0]].reshape(-1,1,2),points[edges[:,1]].reshape(-1,1,2),t)
  for path in paths:
    pylab.plot(path[:,0],path[:,1],'g')
  # Show
  pylab.axes().set_aspect('equal')
  pylab.show()

if __name__=='__main__':
  test_mobius()
  if mode()=='disk':
    plot()
  elif mode()=='flop':
    flop()
  elif mode()!='test':
    raise NotImplementedError("unknown mode '%s'"%mode())
